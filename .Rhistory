}
display.fun <- function(a, alpha, beta, p1, p2, delta, scen){
mat <- expand.grid(a,alpha,beta,p1,p2,scen,delta)
ests <- apply(mat,1,samp.size)
mat$n <- ests
names(mat) <- c("Systems", "alpha", "Power", "$P_{11}$", "$P_{21}$","Scenarios", "delta","n")
return(mat)
}
ests <- (display.fun(a = c(5:10), alpha = c(.01,.05,.1),beta = c(.7,.75,.8,.85),
p1 = c(.85,.9), p2 = c(.85,.9), delta = c(.05,.10),scen = c(0,5:10)))
overall <- subset(ests, Scenarios == 0)
overall.sort <- overall[order(overall$n),]
require(xtable)
print(xtable(head(overall.sort)), sanitize.text.function = function(x){x}, include.rownames = FALSE, floating = FALSE)
cat("\n")
print(xtable(tail(overall.sort)), sanitize.text.function = function(x){x}, include.rownames = FALSE, floating = FALSE)
min.alpha.1 <- subset(overall, alpha == .10 & Systems == 5)
head(min.alpha.1 <- min.alpha.1[order(min.alpha.1$n),])
min.delta.1 <- subset(overall, alpha == .10 & Systems == 5 & delta = 0.1)
head(min.delta.1 <- min.delta.1[order(min.delta.1$n),])
min.delta.1 <- subset(overall, alpha == .10 & Systems == 5 & delta == 0.1)
head(min.delta.1 <- min.delta.1[order(min.delta.1$n),])
display.fun2(a = c(5:10),alpha = c(.05,.1),beta = c(.7,.75,.8),p1 = c(.9,.85),p2 =c(.85,.9),delta = c(.05,.1), scen = c(0,5), b = c(2,4))
samp.size2 <- function(vec){
#function to compute sample size for a 2xa chi-squared test of homogeneity..
#vector must have inputs c(a,alpha,beta,p1,p2,scenarios,delta)
# a = # of detection systems
# b = # of categories in the response - 2 for correct or not, 4 for TP/FN, TN/FP
#alpha is the desired significance level for the test
#beta = desired power
# p1 = true reliability of best detection system
# p2 = true reliability of second best detection system
# delta = difference to detect
# scen = number of scenarios to test. 0 corresponds to overall reliability
# formula according to Nise/Schwertman 2008 article
a <- vec[1]
alpha <- vec[2]
beta <- vec[3]
p1 <- vec[4]
p2 <- vec[5]
delta <- vec[7]
b <- vec[8]
df <- ifelse(vec[6] == 0, (a-1)*(b-1),(a-1)*(vec[6]-1)*(b-1))
out <- sqrt(qchisq(alpha,df,lower.tail = F) - (df-1)) + qnorm(beta)
q1 <- 1-p1
q2 <- 1-p2
n <- ((out)^2*((p1*q1) + (p2*q2)))/delta^2
return(ceiling(n))
}
display.fun2 <- function(a, alpha, beta, p1, p2, delta, scen, b){
mat <- expand.grid(a,alpha,beta,p1,p2,scen,delta,b)
ests <- apply(mat,1,samp.size2)
mat$n <- ests
names(mat) <- c("Systems", "alpha", "Power", "P_11", "P_21","Scenarios", "delta","Resp. Categories", "n")
mat$n.tot <- ifelse(mat$Scenarios == 0, mat$n, mat$n*mat$Scenarios)
mat <- mat[order(mat$n.tot),]
mat <- mat[,c(8,1,6,7,2:5,9,10)]
#ifelse(scen == 0, return(mat[,c(1:5,7:9)]), return(mat))
return(mat)
}
overall <- subset(ests, Scenarios == 0)
overall <- subset(ests, Scenarios == 0)
require(xtable)
print(xtable(head(overall)), sanitize.text.function = function(x){x}, include.rownames = FALSE, floating = FALSE)
ests <- display.fun2(a = c(5:10),alpha = c(.05,.1),beta = c(.7,.75,.8),p1 = c(.9,.85),p2 =c(.85,.9),delta = c(.05,.1), scen = c(0,5), b = c(2,4))
overall <- subset(ests, Scenarios == 0)
print(xtable(head(overall)), sanitize.text.function = function(x){x}, include.rownames = FALSE, floating = FALSE)
ests <- display.fun2(a = c(5:10),alpha = c(.05,.1),beta = c(.7,.75,.8),p1 = c(.9,.85),p2 =c(.85,.9),delta = c(.05,.1), scen = c(0,5), b = c(2,4))
ests
overall <- subset(ests, Scenarios == 0)
head(overall)
min.alpha.1 <- subset(overall, alpha == .10 & Systems == 5)
head(min.alpha.1)
min.delta.1 <- subset(overall, alpha == .10 & Systems == 5 & delta == 0.1)
head(min.delta.1)
min.alpha.1 <- subset(overall, alpha == .10 & Systems == 5, delta == 0.05)
head(min.alpha.1)
overall
ests <- display.fun2(a = c(5:10),alpha = c(.05,.1),beta = c(.7,.75,.8),p1 = c(.9,.85),p2 =c(.85,.9),delta = c(.05,.1), scen = c(0,5), b = c(2,4))
overall <- subset(ests, Scenarios == 0)
subset(overall, delta == 0.05)
min.alpha.1 <- subset(overall, alpha == .10 & Systems == 5& delta == 0.05)
head(min.alpha.1)
min.delta.1 <- subset(overall, alpha == .10 & Systems == 5 & delta == 0.1)
head(min.delta.1)
head(min.alpha.1)
print(xtable(head(overall), sanitize.text.function = function(x){x}, include.rownames = FALSE, floating = FALSE))
head(min.alpha.1)
head(overall)
include.rownames = FALSE, floating = FALSE))
print(xtable(head(mult.ests), sanitize.text.function = function(x){x},
include.rownames = FALSE, floating = FALSE))
mult.ests <- subset(ests, Scenarios != 0 & delta == .10)
mult.ests <- mult.ests[order(mult.ests$n),]
head(mult.ests)
mult.ests <- subset(ests, Scenarios != 0)
mult.ests <- mult.ests[order(mult.ests$n),]
head(mult.ests)
mult.ests[1,6]
mult.ests[1,3]
mult.ests[1,9]
print(xtable(out), include.rownames = F)
out <- display.fun2(a = 5,alpha = .1,beta = .7,p1 = .9,p2 =.9,delta = .1, scen = 0, b = 4)
print(xtable(out), include.rownames = F)
out[,9]
display.fun2(a = 5,alpha = c(.1,0.05),beta = c(.7,.8),p1 = c(.85,.9),p2 =c(.85,.9),delta = c(.1, 0.05), scen = 0, c = 2)
@
display.fun2(a = 5,alpha = c(.1,0.05),beta = c(.7,.8),p1 = c(.85,.9),p2 =c(.85,.9),delta = c(.1, 0.05), scen = 0, c = 2)
source('~/.active-rstudio-document', echo=TRUE)
out <- display.fun2(a = 5,alpha = .1,beta = .7,p1 = c(.75,.9),p2 =c(.75,.9),delta = .1, scen = 0, c = 4)
2/sqrt(85)
require(car)
sim <- arima.sim(n = 77, model = list(ar = c(0.37, 0.15)))
par(mfrow = c(1,2))
plot(sim, type = "l", xlab = "Time", ylab = "Deviation from mean",
main = "Simulated AR(2) model for western white pine (delta_p)")
acf(sim, xlab = "lag", main = "Sample ACF plot",lag.max = 15)
@
scatterplot(1:77, sim, regLine = F)
scatterplot(1:77, sim, regLine = F, type = "l")
data.frame <- c(ts = sim, year = c(1:77))
data.frame
sim.dat <- data.frame(ts = sim, year = c(1:77))
sim.dat
fit.quad <- lm(ts~poly(year,2), data = sim.dat, )
fit.quad
fit.quad <- lm(ts~poly(year,2), data = sim.dat)
summary(fit.quad)
coef(fit.quad)
dim(sim.dat)
curve(coef(sim.dat)%*%c(1,x,x^2) )
coef(sim.dat)%*%cbind(rep(1,77), c(1:77), c(1:77)^2)
model.matrix(fit.quad)
dim(model.matrix(fit.quad))
coef(sim.dat)%*%t(model.matrix(fit.quad)))
coef(sim.dat)%*%t(model.matrix(fit.quad))
dim(coef(sim.dat))
matrix(coef(sim.dat))
coef(sim.dat)
coef(fit.quad)
coef(fit.quad)%*%t(model.matrix(fit.quad)))
coef(fit.quad)%*%t(model.matrix(fit.quad))
curve(coef(fit.quad)%*%t(model.matrix(fit.quad))~c(1:77) )
lines(coef(fit.quad)%*%t(model.matrix(fit.quad))~c(1:77))
coef(fit.quad)%*%t(model.matrix(fit.quad))
as.vector(coef(fit.quad)%*%t(model.matrix(fit.quad)))
lines(as.vector(coef(fit.quad)%*%t(model.matrix(fit.quad)))~c(1:77))
plot(sim,type = "l", xlab = "Time", ylab = "Deviation from Mean")
lines(as.vector(coef(fit.quad)%*%t(model.matrix(fit.quad)))~c(1:77))
summary(harm1)
harm1 <- lm(y1 ~ time(y1) + harmonic(y1,1))
require(TSA)
allt<-read.csv("http://copy.com/k9pYEl12PCScIVWi",header=T)
y1<-ts(allt$y1,freq=12)
y2<-ts(allt$y2,freq=12)
meany1y2<-ts(allt$meany1y2,freq=12)
plot(y1)
lines(y2,col=2)
lines(meany1y2,col=3,lwd=2)
legend("topright", c("Region 1", "Region 2", "Average"), lty = rep(1,3), col= c(1,2,3), bty = "n")
harm1 <- lm(y1 ~ time(y1) + harmonic(y1,1))
summary(harm1)
summary(harm1)$coefficients
summary(harm2)$coefficients
harm2 <- lm(y2 ~ time(y2) + harmonic(y2,1))
summary(harm2)$coefficients
harm.avg <- lm(meany1y2 ~ time(meany1y2) + harmonic(meany1y2,1))
summary(harm.avg)$coefficients
plot(y1[1:12])
plot(y1[1:24])
plot(y1[1:24], type = "l")
lines(y2, col = 2)
lines(y2[1:24], col = 2)
lines(meany1y2, col = 3, lwd = 3)
lines(meany1y2[1:24], col = 3, lwd = 3)
plot(y1[1:24], type = "l")
lines(y2[1:24], col = 2)
lines(meany1y2[1:24], col = 3, lwd = 3)
plot(y1[1:24], type = "l")
lines(y2[1:24], col = 2)
lines(meany1y2[1:24], col = 3, lwd = 3)
coef(harm.1)[4]
coef(harm1)[4]
coef(harm1)[4]^2
coef(harm1)[3]^2
sqrt(coef(harm1)[3]^2 + coef(harm1)[4]^2))
sqrt(coef(harm1)[3]^2 + coef(harm1)[4]^2)
round(sqrt(coef(harm1)[3]^2 + coef(harm1)[4]^2), 2)
coef(harm.avg)[3]
optim1 <- lm(y1 ~ time(y1) + harmonic(y1,3))
optim2 <- lm(y2 ~ time(y2) + harmonic(y2,3))
optim.avg <- lm(meany1y2 ~ time(meany1y2) + harmonic(meany1y2,3))
optim1.coef <- coef(optim1)[3:8]
season1 <- harmonic(y1,3)[1:12,]%*%optim1.coef
plot(1:12, season1, type='l', main = "Estimated harmonic seasonality", ylab = " ", xlab = " ", lty = 1, lwd = 2, ylim = c(-.15,.15))
optim2.coef <- coef(optim2)[3:8]
season2 <- harmonic(y2,3)[1:12,]%*%optim2.coef
lines(1:12, season2, type='l', col = 2, lty = 2, lwd = 2)
optimAvg.coef <- coef(optim.avg)[3:8]
season.avg <- harmonic(meany1y2,3)[1:12,]%*%optimAvg.coef
lines(1:12, season.avg, type = 'l', col = 3, lwd = 2, lty = 4)
theta <- -.5
theta <- 0.5
(1-theta)^2
(1-theta)^2 /(1+(1-theta)^2 + theta^2)
-theta/(1 + (1-theta)^2 + theta^2)
e.vec <- rnorm(100,0,2)
e.vec
x.test <- filter(e.vec, filter = c(-.5), method = 'recursive')
x.test
-3.04456868 -.5*(-2.21342953)
-.5*(-3.04456868) +(-2.21342953)
-.5*(-2.21342953) + 0.34579580
e.vec <- rnorm(10)
e.vec
x.test <- filter(e.vec, filter = c(-.5), method = 'recursive')
x.test
-.5*0.66696516 + 0.19587477
-.5*0.19587477 + 0.64610901
-.5*0.64610901 + 0.24907182
x.test <- filter(e.vec, filter = c(1,-.5), method = 'convolution')
x.test
x.test <- filter(e.vec, filter = c(1,-.5), method = 'convolution', sides = 1)
x.tes
x.test
e.vec
-.5*.66696516+ 0.19587477
-.5*0.19587477+ 0.64610901
e.vec <- rnorm(100,0,2)
e.vec <- c(0,e.vec)
e.vec
x.vec <- filter(e.vec, filter = c(1,-.5), sides = 1, method = 'convolution')
x.vec
e.vec <- rnorm(100,0,2)
e.vec <- c(0,e.vec)
x.vec <- filter(e.vec, filter = c(1,-.5), sides = 1, method = 'convolution')
x.vec <- x.vec[2:101]
y.vec <- filter(x.vec, c(1,1), method = 'convolution', sides = 1)/2
print(acf(x.vec[2:100]))
print(acf(y.vec[2:99]))
13^2
2^13
1/8192
2^13
source('~/.active-rstudio-document', echo=TRUE)
xtable(AICcomp)
row <- rep(1:3, each = 15)
row
col <- rep(1:3, 15)
col
col <- rep(1:3, each = 5)
col
col <- rep(rep(1:3, each = 5), 3)
col
plot <- row*col
plot
plot <- rep(1:9, each = 5)
plot
split <- rep(1:5, each = 3)
split
split <- rep(1:5,  3)
split
split <- rep(1:5,  9)
character(1:5)
character(1)
character
A:E
as.character(1:5)
sample(x = c("A" "B" "C" "D" "E"),size = 5, rep = F)
rotation <- rep(sample(x = c("A","B","C","D","E"),size = 5, rep = F))
sample(x = c("A" "B" "C" "D" "E"),size = 5, rep = F)
rotation
sample(x = c("A","B","C","D","E"),size = 5, rep = F)
rotation <- rep(sample(x = c("A","B","C","D","E"),size = 5, rep = F),9)
rotation
mgt <- rep(sample(x = "Graze", "Till", "Spray"))
mgt <- rep(sample(x = "Graze", "Till", "Spray", size = 1), each = 5)
sample(x = "Graze", "Till", "Spray", size = 1)
mgt <- rep(sample(x =c( "Graze", "Till", "Spray"), size = 1), each = 5)
mgt
mgt <- rep(c( "Graze", "Till", "Spray", "Spray", "Graze", "Till", "Till", "Spray", "Graze"), size = 1), each = 5)
mgt <- rep(c( "Graze", "Till", "Spray", "Spray", "Graze", "Till", "Till", "Spray", "Graze"), each = 5)
mgt
y1 <- rbeta(length(row))
y1 <- rbeta(length(row), shape1 = 5,shape2 = 5)
y1
y1 <- rbeta(length(row), shape1 = 5,shape2 = 3)
y1
y1 <- rbeta(length(row), shape1 = 2,shape2 = 1)
y1
y1 <- rbeta(length(row), shape1 = 6,shape2 = 1)
y1
fake <- data.frame(row, col, whole, split, mgt, rotation, y1,y2,y3,y4,y5)
row <- rep(1:3, each = 15)
col <- rep(rep(1:3, each = 5), 3)
whole <- rep(1:9, each = 5)
split <- rep(1:5,  9)
mgt <- rep(c( "Graze", "Till", "Spray", "Spray", "Graze", "Till", "Till", "Spray", "Graze"), each = 5)
rotation <- rep(sample(x = c("A","B","C","D","E"),size = 5, rep = F),9)
y1 <- rep(".", length(row))
y2 <- rep(".", length(row))
y3 <- rep(".", length(row))
y4 <- rep(".", length(row))
y5 <- rep(".", length(row))
y6 <- rep(".", length(row))
fake <- data.frame(row, col, whole, split, mgt, rotation, y1,y2,y3,y4,y5)
fake
xtable(fake[1:15,])
library(xtable)
print(xtable(fake[1:15,], caption = "Format of the percent cover data for one perennial weed species"), include.rownames = F )
print(xtable(fake[1:12,], caption = "Format of the percent cover data for one perennial weed species"), include.rownames = F )
row
print(xtable(fake[c(1:10, 35:10),], caption = "Format of the percent cover data for one perennial weed species"), include.rownames = F )
print(xtable(fake[c(1:10),], caption = "Format of the percent cover data for one perennial weed species"), include.rownames = F )
print(xtable(fake[c(1:10),], caption = "Format of the percent cover data for one perennial weed species - first 10 rows"), include.rownames = F )
print(xtable(fake[c(35:45),], caption = "Format of the percent cover data for one perennial weed species - last 10 rows"), include.rownames = F )
print(xtable(fake[c(1:9),], caption = "Format of the percent cover data for one perennial weed species - first 10 rows"), include.rownames = F )
print(xtable(fake[c(1:10),], caption = "Format of the percent cover data for one perennial weed species - first 10 rows"), include.rownames = F )
print(xtable(fake[c(36:45),], caption = "Format of the percent cover data for one perennial weed species - last 10 rows"), include.rownames = F )
scheme <- matrix(c(1:9), nrow = 3, ncol= 3, byrow = T)
scheme
scheme <- matrix(c(1:9), nrow = 3, ncol= 3, byrow = T)
colnames(scheme) <- c("col 1", "col 2", "col 3")
rownames(scheme) <- c("row 1", "row 2", "row 3")
scheme <- matrix(c(1:9), nrow = 3, ncol= 3, byrow = T)
scheme
scheme <- matrix(c(1:9), nrow = 3, ncol= 3, byrow = T)
rownames(scheme) <- c("row 1", "row 2", "row 3")
colnames(scheme) <- c("col 1", "col 2", "col 3")
scheme
library(magic)
rlatin(n = 1,size = 3)
rl.square <- rlatin(n = 1,size = 3)
rl.square <- as.vector(rl.square)
r1.square
rl.square
rl.square <- ifelse(rl.square == 1, "Graze",
ifelse(rl.square == 2, "Till",
"Spray"
)
)
r1.squre
rl.squre
rl.square
r.mgt <- rep(rl.square, each = 5)
r.mgt
shiny::runApp('Desktop/RShiny/App-3')
shiny::runApp('Desktop/RShiny/App-3')
test <- c(1,2)
paste(paste(paste("You have chosen a range that goes from ", test[1]),
" to "), test[2])
shiny::runApp('Desktop/RShiny/App-3')
install.packages(c("maps", mapproj))
install.packages(c("maps", "mapproj"))
counties <- readRDS("Desktop/RShiny/App-3/data/counties.rds")
head(counties)
counties[500:510,]
counties[1000:510,]
counties[1000,]
counties[1200,]
counties[1400,]
counties[1500,]
counties[1600,]
counties[1500,1520]
counties[1500,1520,]
counties[1500:1520,]
counties[1520:1550,]
counties[1550:1600,]
counties[1565:1620,]
counties[1565:1630,]
counties[1565:1621,]
library(maps)
library(mapproj)
source("Desktop/RShiny/App-3/helpers.R")
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$white, "darkgreen", "% White")
library(mapproj)
library(mapproj)
library(map)
library(maps)
library(mapproj)
shiny::runApp('Desktop/RShiny/App-3')
library(mapproj)
?percent_map
??percent_map
shiny::runApp('Desktop/RShiny/App-3')
shiny::runApp('Desktop/RShiny/App-3')
shiny::runApp('Desktop/RShiny/App-3')
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "black", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title,
cex = .9, bty = "n")
}
shiny::runApp('Desktop/RShiny/App-3')
shiny::runApp('Desktop/test/App1')
pois.x <- rpois(10)
pois.x <- rpois(10, 10)
pois.x
table(pois.x)
plot(table(pois.x))
plot(pois.x, type = "h")
plot(table(pois.x))
poits(table(pois.x))
points(table(pois.x))
poits(table(pois.x), type = "b")
plots(table(pois.x), type = "b")
plot(table(pois.x), type = "b")
plot(table(pois.x))
dimnames(table(pois.x))
as.numeric(dimnames(table(pois.x)))
as.numeric(dimnames(table(pois.x))$pois.x)
x.vals <- as.numeric(dimnames(table(pois.x))$pois.x)
y.vals <- table(pois.x)
y.vals
as.vector(y.vals)
y.vals <- as.vector(table(pois.x))
points(x.vals, y.vals)
pois.vec <- pois.x
tab <- table(pois.vec)
tab
x.vals <- as.numeric(dimnames(tab)$pois.vec)
x.vals
y.vals <- as.vector(tab)
y.vals
plot(tab, lwd = 2)
plot(tab, lwd = 3)
plot(tab, lwd = 3, ylab = Count, xlab = " ")
plot(tab, lwd = 3, ylab = "Count", xlab = " ")
x.tick <- seq(x.vals[1], x.vals[length(x.vals)],1)
x.tick
plot(tab, lwd = 3, ylab = "Count", xlab = " ", xaxt = "n")
x.tick <- seq(x.vals[1], x.vals[length(x.vals)],1)
axis(1, labels = as.character(x.tick), tick = T)
axis(at = x.tick, 1, labels = as.character(x.tick), tick = T)
points(x.vals, y.vals, col = "#2ca25f", pch = 20)
points(x.vals, y.vals, col = "#2ca25f", pch = 20, cex = 2)
poisPlot <- function(pois.vec, ...){
tab <- table(pois.vec)
x.vals <- as.numeric(dimnames(tab)$pois.vec)
y.vals <- as.vector(tab)
plot(tab, lwd = 3, ylab = "Count", xlab = " ", xaxt = "n")
x.tick <- seq(x.vals[1], x.vals[length(x.vals)],1)
axis(at = x.tick, 1, labels = as.character(x.tick), tick = T)
points(x.vals, y.vals, col = "#2ca25f", pch = 20, cex = 2)
}
poisPlot(rpois(1000,1`0))
poisPlot(rpois(1000,10))
poisPlot(rpois(1000,2))
poisPlot(rpois(1000,3))
poisPlot <- function(pois.vec, ...){
tab <- table(pois.vec)
x.vals <- as.numeric(dimnames(tab)$pois.vec)
y.vals <- as.vector(tab)
plot(tab, lwd = 3,
ylab = "Count",
xlab = " ",
xaxt = "n", ...)
x.tick <- seq(x.vals[1], x.vals[length(x.vals)],1)
axis(at = x.tick, 1, labels = as.character(x.tick), tick = T)
points(x.vals, y.vals, col = "#2ca25f", pch = 20, cex = 2)
}
poisPlot(rpois(1000,3), main = "Poisson with mean 3")
poisPlot <- function(pois.vec, ...){
tab <- table(pois.vec)
x.vals <- as.numeric(dimnames(tab)$pois.vec)
y.vals <- as.vector(tab)
plot(tab, lwd = 3,
ylab = "Count",
xlab = " ",
xaxt = "n", ...)
x.tick <- seq(x.vals[1], x.vals[length(x.vals)],1)
axis(at = x.tick, 1,
labels = as.character(x.tick),
tick = T)
points(x.vals, y.vals,
col = "#2ca25f",
pch = 20,
cex = 2)
}
poisPlot(rpois(1000,3), main = "Poisson with mean 3")
source("App-pois/helper.R")
getwd()
setwd("~/Desktop/RShiny/UseR-talk/")
source("App-pois/helper.R")
source("App-pois/helpers.R")
